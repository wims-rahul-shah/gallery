@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/snake.css" />
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/showdown@2.1.0/dist/showdown.min.js"></script>
    <style>
        /* General Reset */
        html, body {
            height: 100%;
            margin: 0;
        }

        /* Topbar fixed */
        .navbar {
            height: 56px;
            border-bottom: 1px solid #ddd;
            position: sticky;
            top: 0;
            z-index: 1050; /* stay above content */
        }

        /* Wrapper layout */
        .main-wrapper {
            display: flex;
            height: calc(100vh - 56px);
            overflow: hidden;
        }

        /* Sidebar */
        .sidebar {
            width: 250px;
            background: #212529;
            color: white;
            overflow-y: auto;
            transition: transform 0.3s ease-in-out;
        }

            .sidebar .nav-link {
                color: #ddd;
                padding: 10px 15px;
            }

                .sidebar .nav-link.active {
                    background: #343a40;
                    color: #fff;
                    border-radius: 6px;
                }

        /* Mobile: Sidebar hidden offscreen by default */
        @@media (max-width: 991px) {
            .sidebar

        {
            position: fixed;
            top: 56px;
            bottom: 0;
            left: 0;
            transform: translateX(-100%);
            width: 220px;
            z-index: 1040;
        }

        .sidebar.show {
            transform: translateX(0);
        }

        .main-wrapper {
            flex-direction: column;
        }

        #mainContent {
            padding: 1rem;
            width: 100%;
        }

        }

        /* Main Content scrollable */
        #mainContent {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        /* Profile image */
        .profile-img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

        /* --- Photo Library --- */
        .photolib {
            height: calc(100vh - 110px);
            overflow-y: auto;
            padding: 0.5rem;
        }

        /* Folder grid */
        .folders {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));
            gap: 12px;
            margin-bottom: 10px;
        }

        /* Folder card look */
        .folder {
            text-align: center;
            padding: 10px;
            border-radius: 8px;
            text-decoration: none;
            color: inherit;
            background: #f8f9fa;
            transition: background 0.2s;
        }

            .folder:hover {
                background: #e9ecef;
            }

            .folder.active {
                outline: 2px solid #0969da; /* GitHub blue */
                background: #f0f6ff;
            }

        .folder-icon {
            width: 50px;
            height: 50px;
            margin: 0 auto;
        }

        .folder-name {
            margin-top: 6px;
            font-size: 13px;
            font-weight: 500;
            word-break: break-word;
        }

        /* Responsive adjustments */
        @@media (max-width: 576px) {
            .folders

        {
            grid-template-columns: repeat(2, 1fr); /* 2 per row on small */
        }

        .folder {
            padding: 8px;
        }

        .folder-icon {
            width: 45px;
            height: 45px;
        }

        .folder-name {
            font-size: 12px;
        }

        }

    </style>
</head>
<body>
    <!-- Top Navbar -->
    @await Html.PartialAsync("_Topbar")

    <div class="main-wrapper">
        <!-- Sidebar -->
        @await Html.PartialAsync("_Sidebar")

        <!-- Main Content -->
        <div class="flex-fill p-4" id="mainContent">
            @RenderBody()
        </div>
    </div>

    <!-- Video Modal -->
    <div class="modal fade" id="videoModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Video Player</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="videoModalClose"></button>
                </div>
                <div class="modal-body">
                    <div class="ratio ratio-16x9">
                        <iframe id="videoFrame" src="" title="Video player" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script>
            function loadTab(tabName) {
                fetch(`/Home/${tabName}`)
                    .then(res => res.text())
                    .then(html => {
                        document.getElementById("mainContent").innerHTML = html;

                        // initialize if widgets tab is loaded
                if (tabName === "Widgets") {
                    initWidgets();
                }
                    // initialize if chat tab is loaded
                    if (tabName === "Chat") {
                        initChat();
                    }
                    
            })
                    .catch(err => console.error(err));
            }
            //download pdf for reg users
            function downloadTable() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text("Registered Users", 14, 20);

            doc.autoTable({
                html: '#usersTable',
                startY: 30,
                styles: { fontSize: 10, cellPadding: 3 },
                headStyles: { fillColor: [33, 37, 41] },
            });
            doc.save("registered_users.pdf");
        }

        // Optional enhancement: PhotoLibrary highlight the selected folder
        (function () {
          document.addEventListener('click', function (e) {
            const link = e.target.closest('.folder');
            if (!link) return;
            // If you prefer pure JS src-setting, uncomment the next lines and remove target/href behavior:
            // e.preventDefault();
            // document.getElementById('gdriveFrame').src =
            //   `https://drive.google.com/embeddedfolderview?id=${link.dataset.gdId}#grid`;

            // Active styling
            document.querySelectorAll('.folder.active').forEach(el => el.classList.remove('active'));
            link.classList.add('active');
          }, false);
        })();
            //sidebar js
                    function setActive(el) {
                document.querySelectorAll('.sidebar .nav-link').forEach(link => link.classList.remove('active'));
                el.classList.add('active');
            }

            // Toggle sidebar js in mobile
            function toggleSidebar() {
                document.getElementById("sidebar").classList.toggle("show");
            }
            // Refresh youtube video search button function
            function submitTopSearch() {
                var q = document.getElementById('topSearchInput').value || 'latest';
                fetch(`/Home/VideoLibrary?q=${encodeURIComponent(q)}`)
                    .then(r => r.text())
                    .then(html => document.getElementById("mainContent").innerHTML = html)
                    .catch(e => console.error(e));
            }
            // Refresh youtube video button function
            function openVideoById(vid) {
                var frame = document.getElementById('videoFrame');
                if (!vid) return;
                frame.src = 'https://www.youtube.com/embed/' + vid + '?autoplay=1&rel=0';
                var modal = new bootstrap.Modal(document.getElementById('videoModal'));
                modal.show();

                var modalEl = document.getElementById('videoModal');
                modalEl.addEventListener('hidden.bs.modal', function () { frame.src = ''; }, { once: true });
            }
            // Open youtube video function
            function openVideo(urlOrId) {
                var id = urlOrId;
                try {
                    if (urlOrId.includes('youtube.com') || urlOrId.includes('youtu.be')) {
                        var u = new URL(urlOrId);
                        if (u.hostname.includes('youtu.be')) { id = u.pathname.substring(1); }
                        else { id = u.searchParams.get('v') || id; }
                    }
                } catch (e) { }
                openVideoById(id);
            }
                // Refresh youtube video button function
            function refreshVideos() {
                document.getElementById('topSearchInput').value = ''; // clear search
                fetch(`/Home/VideoLibrary?q=latest`) // load default videos
                    .then(res => res.text())
                    .then(html => {
                        document.getElementById('mainContent').innerHTML = html;
                    })
                    .catch(err => console.error(err));
            }
            //js for musicLibrary
                function music(button) {
            // Change iframe src
            document.getElementById("music-frame").src = button.getAttribute("data-src");

            // Update active button
            document.querySelectorAll(".music-btn").forEach(b => b.classList.remove("active"));
            button.classList.add("active");
        }
        
        //news search js
        // Search function news
        function submitNewsSearch() {
            var q = document.getElementById('newsSearchInput').value || 'India';
            fetch(`/Home/News?q=${encodeURIComponent(q)}`)
                .then(r => r.text())
                .then(html => document.getElementById("mainContent").innerHTML = html)
                .catch(e => console.error(e));
        }

        // Refresh function news
        function refreshNews() {
            document.getElementById('newsSearchInput').value = ''; // clear search
            fetch(`/Home/News?q=latest`) // load default news
                .then(res => res.text())
                .then(html => {
                    document.getElementById('mainContent').innerHTML = html;
                })
                .catch(err => console.error(err));
        }

                // games function
            async function loadGame(game, btn) {
                const gameContainer = document.getElementById('gameContainer');

                // Highlight active button
                document.querySelectorAll('.game-btn.active').forEach(el => el.classList.remove('active'));
                btn.classList.add('active');

                // games page js
                gameContainer.innerHTML = '<p>Loading...</p>';

                try {
                    if (game === 'snake') {
                        console.log("ille");
                        const res = await fetch('/Home/Snake');
                        const html = await res.text();
                        gameContainer.innerHTML = html;

                        // Import snake.js dynamically
                        const module = await import('/js/snake.js');
                        module.initSnakeGame();
                    }
                    else if (game === 'tetris') {
                        const res = await fetch('/Home/Tetris');
                        const html = await res.text();
                        gameContainer.innerHTML = html;

                        // Import tetris.js dynamically
                        const module = await import('/js/tetris.js');
                        module.initTetrisGame();
                    }
                    else if (game === 'flappybird') {
                        const res = await fetch('/Home/FlappyBird');
                        const html = await res.text();
                        gameContainer.innerHTML = html;

                        // Import flappybird.js dynamically
                        const module = await import('/js/flappybird.js');
                        module.initFlappyGame();
                    }
                    else if (game === 'quiz') {
                        const res = await fetch('/Home/Quiz');
                        const html = await res.text();
                        gameContainer.innerHTML = html;

                        // Import flappybird.js dynamically
                        const module = await import('/js/quiz.js');
                        module.initQuiz();
                    }
                } catch (err) {
                    console.error("Error loading game:", err);
                    gameContainer.innerHTML = '<p>Failed to load game.</p>';
                }
            }
            //widgets function
        function initWidgets() {
                // 1️⃣ Weather
                const weatherApiKey = "e7c5936af87f7c6dc44f17f1dad5085d";
                const city = "Tinsukia";

                async function loadWeather() {
                    try {
                        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${weatherApiKey}&units=metric`);
                        const data = await res.json();
                        document.getElementById("weatherContent").innerHTML = `
                            <p>Location - ${data.name} | ${data.sys.country}</p>
                            <p>Temp - ${Math.round(data.main.temp)}°C | Feels Like - ${Math.round(data.main.feels_like)}°C</p>
                            <p>🌬 Wind: ${data.wind.speed} Miles/hr | ${data.weather[0].description}</p>
                        `;
                    } catch (e) {
                        console.error(e);
                        document.getElementById("weatherContent").innerText = "Failed to load weather.";
                    }
                }
                loadWeather();

                // Clock
                function updateClock() {
                    let now = new Date();
                    document.getElementById("clockTime").innerText = now.toLocaleTimeString();
                    document.getElementById("clockDate").innerText = now.toDateString();
                }
                setInterval(updateClock, 1000);
                updateClock();

                // To-do
                let todoList = JSON.parse(localStorage.getItem("todos") || "[]");
                    function renderTodos() {
            document.getElementById("todoList").innerHTML = todoList.map((t,i) =>
                `<li style="display:flex; justify-content:space-between; align-items:center;
                           padding:5px; margin-bottom:4px; background:rgba(0,255,128,0.1);
                           border-radius:4px;">
                    <span>${t}</span>
                    <button class="btn btn-sm btn-danger"
                            style="margin-left:300px; padding:3px 7px; font-size:14px; line-height:1;"
                            onclick="removeTodo(${i})">x</button>
                 </li>`
            ).join("");
                    localStorage.setItem("todos", JSON.stringify(todoList));
                }
                document.getElementById("newTodo").addEventListener("keypress", e => {
                    if (e.key === "Enter") {
                        todoList.push(e.target.value);
                        e.target.value = "";
                        renderTodos();
                    }
                });
                window.removeTodo = i => { todoList.splice(i,1); renderTodos(); };
                renderTodos();

                // Calculator
                window.calculate = function() {
                    try {
                        let expr = document.getElementById("calcInput").value;
                        let result = eval(expr);
                        document.getElementById("calcResult").innerText = "= " + result;
                    } catch {
                        document.getElementById("calcResult").innerText = "Invalid Expression";
                    }
                };

            /* Stopwatch with milliseconds */
            let swInterval, swMs = 0;
            function updateStopwatch() {
                let hrs = String(Math.floor(swMs / 3600000)).padStart(2,'0');
                let mins = String(Math.floor((swMs % 3600000) / 60000)).padStart(2,'0');
                let secs = String(Math.floor((swMs % 60000) / 1000)).padStart(2,'0');
                let ms   = String(swMs % 1000).padStart(3,'0');
                document.getElementById("stopwatch").innerText = `${hrs}:${mins}:${secs}.${ms}`;
            }
            window.startStopwatch = () => { if (!swInterval) swInterval = setInterval(()=>{ swMs+=10; updateStopwatch(); }, 10); };
            window.stopStopwatch = () => { clearInterval(swInterval); swInterval = null; };
            window.resetStopwatch = () => { swMs=0; updateStopwatch(); };
            updateStopwatch();

                // Quote of the Day
            const quotes = [
                "🌟 Believe in yourself and all that you are.",
                "🚀 The best way to get started is to quit talking and begin doing.",
                "🌈 Difficult roads often lead to beautiful destinations.",
                "🔥 Don’t watch the clock; do what it does. Keep going.",
                "💡 Success is not final, failure is not fatal: It is the courage to continue that counts.",
                "🌍 Small steps in the right direction can turn out to be the biggest step of your life."
            ];

            function loadQuote() {
                const randomIndex = Math.floor(Math.random() * quotes.length);
                document.getElementById("quoteText").innerText = quotes[randomIndex];
            }
            loadQuote();
        }

            //email send gmail
            async function sendEmail() {
              let subject = document.getElementById("emailSubject").value;
              let body = document.getElementById("emailBody").value;

              const res = await fetch("/Home/Email", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ subject, body })
              });

              const result = await res.json();
              if (result.success) {
                alert("✅ Email sent successfully!");
                document.getElementById("emailSubject").value = "";
                document.getElementById("emailBody").value = "";
              } else {
                alert("❌ Failed: " + result.error);
              }
            }

                    //js for AI Chat
        function initChat() {
            const sendBtn = document.getElementById("sendBtn");
            const input = document.getElementById("chatInput");
            const chatBox = document.getElementById("chatBox");
            const typingIndicator = document.getElementById("typingIndicator");

            // Basic Markdown parser for styling
            function formatMarkdown(text) {
                return text
                    .replace(/\n/g, "<br>")                         // line breaks
                    .replace(/```([^`]*)```/gs, "<pre><code>$1</code></pre>") // code blocks
                    .replace(/`([^`]*)`/g, "<code>$1</code>")       // inline code
                    .replace(/\*\*(.*?)\*\*/g, "<b>$1</b>")         // bold
                    .replace(/\*(.*?)\*/g, "<i>$1</i>")             // italic
                    .replace(/^- (.*)$/gm, "• $1");                 // bullet list
            }

            async function sendMessage() {
                const message = input.value.trim();
                if (!message) return;

                // User message
                chatBox.innerHTML += `
                    <div class="msg-wrapper from-user">
                        <span class="avatar">🙂</span>
                        <div class="msg msg-user">${message}</div>
                    </div>`;
                chatBox.scrollTop = chatBox.scrollHeight;
                input.value = "";

                // Show typing indicator
                typingIndicator.style.display = "block";

                try {
                    const resp = await fetch("/Home/PostChat", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ message })
                    });
                    const data = await resp.json();

                    typingIndicator.style.display = "none";

                    if (data.success) {
                        const formattedReply = formatMarkdown(data.reply);

                        chatBox.innerHTML += `
                            <div class="msg-wrapper from-bot">
                                <span class="avatar">🤖</span>
                                <div class="msg msg-bot">${formattedReply}</div>
                            </div>`;
                    } else {
                        chatBox.innerHTML += `
                            <div class="msg-wrapper from-bot">
                                <span class="avatar">⚠️</span>
                                <div class="msg msg-bot text-danger"><b>Error:</b> ${data.error}</div>
                            </div>`;
                    }
                } catch (err) {
                    typingIndicator.style.display = "none";
                    chatBox.innerHTML += `
                        <div class="msg-wrapper from-bot">
                            <span class="avatar">⚠️</span>
                            <div class="msg msg-bot text-danger"><b>Request failed:</b> ${err}</div>
                        </div>`;
                }

                chatBox.scrollTop = chatBox.scrollHeight;
            }

            sendBtn.addEventListener("click", sendMessage);
            input.addEventListener("keypress", e => {
                if (e.key === "Enter") sendMessage();
            });
        }

            

    </script>
    
</body>
</html>
